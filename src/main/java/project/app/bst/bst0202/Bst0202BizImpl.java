/**************************************************************************************************
 * project
 * Description - Bst0202 - Bank Transaction
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.bst.bst0202;

import java.io.File;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import zebra.config.MemoryBean;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;
import zebra.util.FileUtil;
import project.common.extend.BaseBiz;
import project.common.module.bizservice.bankstatement.BankStatementBizService;
import project.common.module.commoncode.CommonCodeManager;
import project.conf.resource.ormapper.dao.SysBoard.SysBoardDao;
import project.conf.resource.ormapper.dao.SysBoardFile.SysBoardFileDao;
import project.conf.resource.ormapper.dao.UsrBankAccnt.UsrBankAccntDao;
import project.conf.resource.ormapper.dao.UsrBankStatement.UsrBankStatementDao;
import project.conf.resource.ormapper.dto.oracle.SysBoard;

public class Bst0202BizImpl extends BaseBiz implements Bst0202Biz {
	@Autowired
	private UsrBankAccntDao usrBankAccntDao;
	@Autowired
	private UsrBankStatementDao usrBankStatementDao;
	@Autowired
	private BankStatementBizService bankStatementBS;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		DataSet bankAccnt = new DataSet();
		HttpSession session = paramEntity.getSession();
		String userId = (String)session.getAttribute("UserId");

		try {
			bankAccnt = usrBankAccntDao.getDataSetForSearchCriteriaByUserId(userId);

			paramEntity.setObject("bankAccnt", bankAccnt);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String userId = (String)session.getAttribute("UserId");
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		String fromDate = requestDataSet.getValue("fromDate");
		String toDate = requestDataSet.getValue("toDate");

		try {
			queryAdvisor.setObject("userId", userId);
			queryAdvisor.setObject("bankAccntId", bankAccntId);
			queryAdvisor.setObject("fromDate", fromDate);
			queryAdvisor.setObject("toDate", toDate);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(usrBankStatementDao.getDataSetBySearchCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpload(ParamEntity paramEntity) throws Exception {
		DataSet bankAccnt = new DataSet();
		HttpSession session = paramEntity.getSession();
		String userId = (String)session.getAttribute("UserId");

		try {
			bankAccnt = usrBankAccntDao.getDataSetForSearchCriteriaByUserId(userId);

			paramEntity.setObject("bankAccnt", bankAccnt);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();

		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpload(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet fileDataSet = paramEntity.getRequestFileDataSet();
		HttpSession session = paramEntity.getSession();
		String userId = (String)session.getAttribute("UserId");
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		String bankCode = requestDataSet.getValue("bankCode");
		String webPath = ConfigUtil.getProperty("path.dir.bankStatement");
		String uploadPath = ConfigUtil.getProperty("path.dir.uploadedBankStatement");
		String webRootPath = (String)MemoryBean.get("applicationRealPath");
		String pathToCopy = "";
		File file;
		DataSet fileData = new DataSet();
		int result = -1;

		try {
			String fileName = fileDataSet.getValue("NEW_NAME");

			// Copy the file to web source
			pathToCopy = webRootPath + webPath + "/" + fileName;
			FileUtil.copyFile(fileDataSet, pathToCopy);

			// Move the file to repository
			pathToCopy = uploadPath + "/" + fileName;
			FileUtil.moveFile(fileDataSet, pathToCopy);

			file = new File(pathToCopy);

			fileData = bankStatementBS.getBankStatementDataSetFromFileByBank(bankCode, file);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		int result = -1;

		try {
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		int result = 0;

		try {
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String columnHeader[] = new String[] {};
		String pageTitle = "", fileName = "";
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(new DataSet());

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}