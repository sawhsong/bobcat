/**************************************************************************************************
 * project
 * Description - Rkm0804 - Payment
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.rkm.rkm0804;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.SysTaxMaster.SysTaxMasterDao;
import project.conf.resource.ormapper.dao.UsrEmployeeWage.UsrEmployeeWageDao;
import project.conf.resource.ormapper.dto.oracle.UsrEmployeeWage;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class Rkm0804BizImpl extends BaseBiz implements Rkm0804Biz {
	@Autowired
	private UsrEmployeeWageDao usrEmployeeWageDao;
	@Autowired
	private SysTaxMasterDao sysTaxMasterDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEmployeeList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));

		try {
			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);

			paramEntity.setAjaxResponseDataSet(usrEmployeeWageDao.getEmployeeListDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getWageList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String financialYear = requestDataSet.getValue("financialYear");
		String quarterName = requestDataSet.getValue("quarterName");
		String employeeId = requestDataSet.getValue("employeeId");

		try {
			queryAdvisor.setObject("financialYear", financialYear);
			queryAdvisor.setObject("quarterName", quarterName);
			queryAdvisor.setObject("employeeId", employeeId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));

			paramEntity.setAjaxResponseDataSet(usrEmployeeWageDao.getWageListDataSetByEmployeeId(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String wageId = requestDataSet.getValue("wageId");

		try {
			paramEntity.setAjaxResponseDataSet(usrEmployeeWageDao.getWageDataSetByWageIdForUpdate(wageId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity calculateDataEntry(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet result = new DataSet(new String[] {"tax", "netWage", "super"});
		String financialYear = requestDataSet.getValue("financialYear");
		String employeeId = requestDataSet.getValue("employeeId");
		String numberFormat = "#,##0.00";
		double superPercentage = 0.095;
		double grossWage = CommonUtil.toDouble(requestDataSet.getValue("grossWage"));
		double tax = 0, netWage = 0, superAmt = 0;

		try {
			result.addRow();

			tax = sysTaxMasterDao.getTaxAmtByTaxYearEmployeeIdIncome(financialYear, employeeId, grossWage);
			netWage = grossWage - tax;
			superAmt = grossWage * superPercentage;

			result.setValue("tax", CommonUtil.toString(tax, numberFormat));
			result.setValue("netWage", CommonUtil.toString(netWage, numberFormat));
			result.setValue("super", CommonUtil.toString(superAmt, numberFormat));

			paramEntity.setAjaxResponseDataSet(result);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeSave(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		UsrEmployeeWage usrEmployeeWage = new UsrEmployeeWage();
		String wageId = CommonUtil.nvl(dsReq.getValue("deWageId"), "-1");
		String employeeId = dsReq.getValue("rdoEmployee");
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String userId = (String)session.getAttribute("UserId");
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String saveType = (CommonUtil.equals(wageId, "-1")) ? "I" : "U";
		int result = -1;

		try {
			if (CommonUtil.equals(saveType, "I")) {
				usrEmployeeWage.setWageId(CommonUtil.uid());
			} else {
				usrEmployeeWage = usrEmployeeWageDao.getEmployeeWageById(wageId);
			}

			usrEmployeeWage.setWageYear(dsReq.getValue("financialYear"));
			usrEmployeeWage.setQuarterName(dsReq.getValue("quarterName"));
			usrEmployeeWage.setOrgId(orgId);
			usrEmployeeWage.setEmployeeId(employeeId);
			usrEmployeeWage.setPeriodStartDate(CommonUtil.toDate(dsReq.getValue("deStartDate"), dateFormat));
			usrEmployeeWage.setPeriodEndDate(CommonUtil.toDate(dsReq.getValue("deEndDate"), dateFormat));
			usrEmployeeWage.setHourlyRate(CommonUtil.toDouble(dsReq.getValue("deHourlyRate")));
			usrEmployeeWage.setHourWorked(CommonUtil.toDouble(dsReq.getValue("deHoursWorked")));
			usrEmployeeWage.setGrossWage(CommonUtil.toDouble(dsReq.getValue("deGrossWage")));
			usrEmployeeWage.setTax(CommonUtil.toDouble(dsReq.getValue("deTax")));
			usrEmployeeWage.setNetWage(CommonUtil.toDouble(dsReq.getValue("deNetWage")));
			usrEmployeeWage.setSuperAmt(CommonUtil.toDouble(dsReq.getValue("deSuper")));
			usrEmployeeWage.setDescription(dsReq.getValue("deRemark"));

			if (CommonUtil.equals(saveType, "I")) {
				usrEmployeeWage.setIsCompleted("N");
				usrEmployeeWage.setInsertUserId(userId);
				usrEmployeeWage.setInsertDate(CommonUtil.getSysdateAsDate());

				result = usrEmployeeWageDao.insert(usrEmployeeWage);
			} else {
				usrEmployeeWage.setUpdateUserId(userId);
				usrEmployeeWage.setUpdateDate(CommonUtil.getSysdateAsDate());

				result = usrEmployeeWageDao.update(wageId, usrEmployeeWage);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String wageIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrEmployeeWageDao.deleteByWageIds(wageIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			pageTitle = "Employee Wage List";
			fileName = "EmployeeWageList";
			columnHeader = new String[] {"SURNAME", "GIVEN_NAME", "HOURLY_RATE", "HOUR_WORKED", "GROSS_WAGE", "TAX", "SUPER_AMT", "NET_WAGE"};
			fileHeader = new String[] {"Surname", "Given Name", "Hourly Rate", "Hours Worked", "Gross Wage", "Tax", "Super", "Net Wage"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(usrEmployeeWageDao.getEmployeeWageDataSetForExport(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}