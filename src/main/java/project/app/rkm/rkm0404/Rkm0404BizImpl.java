/**************************************************************************************************
 * project
 * Description - Rkm0404 - Asset Expense
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.rkm.rkm0404;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

import project.common.extend.BaseBiz;
import project.common.module.commoncode.CommonCodeManager;
import project.conf.resource.ormapper.dao.SysBoard.SysBoardDao;
import project.conf.resource.ormapper.dao.SysBoardFile.SysBoardFileDao;
import project.conf.resource.ormapper.dao.UsrAsset.UsrAssetDao;
import project.conf.resource.ormapper.dto.oracle.SysBoard;
import project.conf.resource.ormapper.dto.oracle.UsrIncome;

public class Rkm0404BizImpl extends BaseBiz implements Rkm0404Biz {
	@Autowired
	private UsrAssetDao usrAssetDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));

		try {
			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(usrAssetDao.getAssetDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
/*
	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String incomeId = requestDataSet.getValue("incomeId");

		try {
			paramEntity.setAjaxResponseDataSet(usrAssetDao.getIncomeDataSetByIdOnlyForUpdate(incomeId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity calculateDataEntry(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet result = new DataSet(new String[] {"netSales"});
		double grossSales = CommonUtil.toDouble(requestDataSet.getValue("grossSales"));
		double gst = CommonUtil.toDouble(requestDataSet.getValue("gst"));
		double netSales = 0;

		try {
			result.addRow();

			netSales = (grossSales - gst);

			result.setValue("netSales", CommonUtil.toString(netSales, "#,##0.00"));

			paramEntity.setAjaxResponseDataSet(result);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeSave(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		UsrIncome usrIncome = new UsrIncome();
		String incomeId = CommonUtil.nvl(dsReq.getValue("deIncomeId"), "-1");
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String userId = (String)session.getAttribute("UserId");
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String saveType = (CommonUtil.equals(incomeId, "-1")) ? "I" : "U";
		int result = -1;

		try {
			if (CommonUtil.equals(saveType, "I")) {
				usrIncome.setIncomeId(CommonUtil.uid());
			} else {
				usrIncome = usrAssetDao.getIncomeById(incomeId);
			}

			usrIncome.setIncomeYear(dsReq.getValue("financialYear"));
			usrIncome.setQuarterName(dsReq.getValue("quarterName"));
			usrIncome.setOrgId(orgId);
			usrIncome.setIncomeEntryType(CommonCodeManager.getCodeByConstants("INCOME_ENTRY_TYPE_OTHTA"));
			usrIncome.setIncomeDate(CommonUtil.toDate(dsReq.getValue("deDate"), dateFormat));
			usrIncome.setGrossAmt(CommonUtil.toDouble(dsReq.getValue("deGrossSales")));
			usrIncome.setGstAmt(CommonUtil.toDouble(dsReq.getValue("deGst")));
			usrIncome.setNetAmt(CommonUtil.toDouble(dsReq.getValue("deNetSales")));
			usrIncome.setDescription(dsReq.getValue("deRemark"));

			if (CommonUtil.equals(saveType, "I")) {
				usrIncome.setIsCompleted("N");
				usrIncome.setInsertUserId(userId);
				usrIncome.setInsertDate(CommonUtil.getSysdateAsDate());

				result = usrAssetDao.insert(usrIncome);
			} else {
				usrIncome.setUpdateUserId(userId);
				usrIncome.setUpdateDate(CommonUtil.getSysdateAsDate());

				result = usrAssetDao.update(incomeId, usrIncome);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeComplete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String incomeIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrAssetDao.exeCompleteByIncomeIds(incomeIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String incomeIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrAssetDao.deleteByIncomeIds(incomeIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String orgCategory = CommonUtil.nvl((String)session.getAttribute("OrgCategoryForAdminTool"), (String)session.getAttribute("OrgCategory"));
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			pageTitle = "Other Sales Income List";
			fileName = "OtherSalesIncomeList";
			columnHeader = new String[] {"INCOME_DATE", "GROSS_AMT", "GST_AMT", "NET_AMT", "IS_COMPLETED", "DESCRIPTION"};
			fileHeader = new String[] {"Date", "Gross Sales", "GST", "Net Sales", "Is Completed", "Description"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("orgCategory", orgCategory);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(usrAssetDao.getOtherIncomeDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
*/
}