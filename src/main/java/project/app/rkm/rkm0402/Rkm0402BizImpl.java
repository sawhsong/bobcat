/**************************************************************************************************
 * project
 * Description - Rkm0402 - General Expense
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.rkm.rkm0402;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.SysExpenseType.SysExpenseTypeDao;
import project.conf.resource.ormapper.dao.UsrExpense.UsrExpenseDao;
import project.conf.resource.ormapper.dto.oracle.SysExpenseType;
import project.conf.resource.ormapper.dto.oracle.UsrExpense;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class Rkm0402BizImpl extends BaseBiz implements Rkm0402Biz {
	@Autowired
	private UsrExpenseDao usrExpenseDao;
	@Autowired
	private SysExpenseTypeDao sysExpenseTypeDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));

		try {
			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(usrExpenseDao.getExpenseDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String expenseId = requestDataSet.getValue("expenseId");

		try {
			paramEntity.setAjaxResponseDataSet(usrExpenseDao.getExpenseDataSetByExpenseIdForUpdate(expenseId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity calculateDataEntry(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet result = new DataSet(new String[] {"netExpense"});
		double grossExpense = CommonUtil.toDouble(requestDataSet.getValue("grossExpense"));
		double gst = CommonUtil.toDouble(requestDataSet.getValue("gst"));
		double netExpense = 0;

		try {
			result.addRow();

			netExpense = (grossExpense - gst);

			result.setValue("netExpense", CommonUtil.toString(netExpense, "#,##0.00"));

			paramEntity.setAjaxResponseDataSet(result);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeSave(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		UsrExpense usrExpense = new UsrExpense();
		SysExpenseType sysExpenseType = new SysExpenseType();
		String expenseId = CommonUtil.nvl(dsReq.getValue("deExpenseId"), "-1");
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String userId = (String)session.getAttribute("UserId");
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String orgCategory = CommonUtil.nvl((String)session.getAttribute("OrgCategoryForAdminTool"), (String)session.getAttribute("OrgCategory"));
		String saveType = (CommonUtil.equals(expenseId, "-1")) ? "I" : "U";
		int result = -1;

		try {
			if (CommonUtil.equals(saveType, "I")) {
				usrExpense.setExpenseId(CommonUtil.uid());
			} else {
				usrExpense = usrExpenseDao.getExpenseById(expenseId);
			}

			usrExpense.setExpenseYear(dsReq.getValue("financialYear"));
			usrExpense.setQuarterName(dsReq.getValue("quarterName"));
			usrExpense.setOrgId(orgId);
			sysExpenseType = sysExpenseTypeDao.getExpenseTypeByOrgCategoryExpenseType(orgCategory, dsReq.getValue("deExpenseSubType"));
			usrExpense.setExpenseTypeId(sysExpenseType.getExpenseTypeId());
			usrExpense.setExpenseDate(CommonUtil.toDate(dsReq.getValue("deDate"), dateFormat));
			usrExpense.setGrossAmt(CommonUtil.toDouble(dsReq.getValue("deGrossExpense")));
			usrExpense.setGstAmt(CommonUtil.toDouble(dsReq.getValue("deGst")));
			usrExpense.setNetAmt(CommonUtil.toDouble(dsReq.getValue("deNetExpense")));
			usrExpense.setDescription(dsReq.getValue("deRemark"));

			if (CommonUtil.equals(saveType, "I")) {
				usrExpense.setIsCompleted("N");
				usrExpense.setInsertUserId(userId);
				usrExpense.setInsertDate(CommonUtil.getSysdateAsDate());

				result = usrExpenseDao.insert(usrExpense);
			} else {
				usrExpense.setUpdateUserId(userId);
				usrExpense.setUpdateDate(CommonUtil.getSysdateAsDate());

				result = usrExpenseDao.update(expenseId, usrExpense);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeComplete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String expenseIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrExpenseDao.exeCompleteByExpenseIds(expenseIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String expenseIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrExpenseDao.deleteByExpenseIds(expenseIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			pageTitle = "General Expense List";
			fileName = "GeneralExpenseList";
			columnHeader = new String[] {"EXPENSE_DATE", "PARENT_EXPENSE_TYPE_DESC", "EXPENSE_TYPE_DESC", "GROSS_AMT", "GST_AMT", "NET_AMT", "IS_COMPLETED", "DESCRIPTION"};
			fileHeader = new String[] {"Date", "Main Type", "Sub Type", "Gross Sales", "GST", "Net Expense", "Is Completed", "Description"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(usrExpenseDao.getExpenseDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}