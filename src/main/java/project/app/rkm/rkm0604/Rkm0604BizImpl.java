/**************************************************************************************************
 * project
 * Description - Rkm0604 - Borrowing
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.rkm.rkm0604;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.commoncode.CommonCodeManager;
import project.conf.resource.ormapper.dao.SysBorrowingType.SysBorrowingTypeDao;
import project.conf.resource.ormapper.dao.UsrFinance.UsrFinanceDao;
import project.conf.resource.ormapper.dao.UsrFinanceFile.UsrFinanceFileDao;
import project.conf.resource.ormapper.dto.oracle.SysBorrowingType;
import project.conf.resource.ormapper.dto.oracle.UsrFinance;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class Rkm0604BizImpl extends BaseBiz implements Rkm0604Biz {
	@Autowired
	private UsrFinanceDao usrFinanceDao;
	@Autowired
	private UsrFinanceFileDao usrFinanceFileDao;
	@Autowired
	private SysBorrowingTypeDao sysBorrowingTypeDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));

		try {
			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(usrFinanceDao.getBorrowingDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String financeId = requestDataSet.getValue("financeId");

		try {
			paramEntity.setAjaxResponseDataSet(usrFinanceDao.getBorrowingDataSetByFinanceIdForUpdate(financeId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getFile(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String financeFileId = requestDataSet.getValue("financeFileId");

		try {
			paramEntity.setAjaxResponseDataSet(usrFinanceFileDao.getFinanceFileDataSetByFileId(financeFileId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeSave(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		DataSet dsFile = paramEntity.getRequestFileDataSet();
		HttpSession session = paramEntity.getSession();
		UsrFinance usrFinance = new UsrFinance();
		SysBorrowingType sysBorrowingType = new SysBorrowingType();
		String financeId = CommonUtil.nvl(dsReq.getValue("deFinanceId"), "-1");
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String userId = (String)session.getAttribute("UserId");
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String orgCategory = CommonUtil.nvl((String)session.getAttribute("OrgCategoryForAdminTool"), (String)session.getAttribute("OrgCategory"));
		String saveType = (CommonUtil.equals(financeId, "-1")) ? "I" : "U";
		int result = -1;

		try {
			if (CommonUtil.equals(saveType, "I")) {
				usrFinance.setFinanceId(CommonUtil.uid());
			} else {
				usrFinance = usrFinanceDao.getFinanceById(financeId);
			}

			usrFinance.setFinanceYear(dsReq.getValue("financialYear"));
			usrFinance.setQuarterName(dsReq.getValue("quarterName"));
			usrFinance.setOrgId(orgId);
			sysBorrowingType = sysBorrowingTypeDao.getBorrowingTypeByOrgCategoryBorrowingType(orgCategory, dsReq.getValue("deBorrowingType"));
			usrFinance.setFinanceTypeId(sysBorrowingType.getBorrowingTypeId());
			usrFinance.setFinanceEntryType(CommonCodeManager.getCodeByConstants("FINANCE_ENTRY_TYPE_BOR"));
			usrFinance.setFinanceDate(CommonUtil.toDate(dsReq.getValue("deDate"), dateFormat));
			usrFinance.setPrincipalAmt(CommonUtil.toDouble(dsReq.getValue("dePrincipalAmt")));
			usrFinance.setInterestPercentage(CommonUtil.toDouble(dsReq.getValue("deInterestPercentage")));
			usrFinance.setStartDate(CommonUtil.toDate(dsReq.getValue("deStartDate"), dateFormat));
			usrFinance.setEndDate(CommonUtil.toDate(dsReq.getValue("deEndDate"), dateFormat));
			usrFinance.setDescription(dsReq.getValue("deRemark"));

			if (CommonUtil.equals(saveType, "I")) {
				usrFinance.setIsCompleted("N");
				usrFinance.setInsertUserId(userId);
				usrFinance.setInsertDate(CommonUtil.getSysdateAsDate());

				result = usrFinanceDao.insert(usrFinance, dsFile);
			} else {
				usrFinance.setUpdateUserId(userId);
				usrFinance.setUpdateDate(CommonUtil.getSysdateAsDate());

				result = usrFinanceDao.update(financeId, usrFinance, dsFile);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeComplete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String financeIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrFinanceDao.exeCompleteByFinanceIds(financeIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String financeIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			result = usrFinanceDao.deleteByFinanceIds(financeIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			pageTitle = "Borrowing List";
			fileName = "BorrowingList";
			columnHeader = new String[] {"FINANCE_DATE", "PRINCIPAL_AMT", "INTEREST_PERCENTAGE", "FINANCE_FILE_NAME", "IS_COMPLETED", "DESCRIPTION"};
			fileHeader = new String[] {"Date", "Principal Amount", "Interest Percentage", "Attached File Name", "Is Completed", "Description"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(usrFinanceDao.getBorrowingDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}