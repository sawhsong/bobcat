/**************************************************************************************************
 * project
 * Description - Rkm0802 - Employee Management
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.rkm.rkm0802;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.UsrEmployee.UsrEmployeeDao;
import project.conf.resource.ormapper.dto.oracle.UsrEmployee;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class Rkm0802BizImpl extends BaseBiz implements Rkm0802Biz {
	@Autowired
	private UsrEmployeeDao usrEmployeeDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));

		try {
			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(usrEmployeeDao.getEmployeeDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getInsert(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdate(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String employeeId = requestDataSet.getValue("employeeId");

		try {
			paramEntity.setObject("usrEmployee", usrEmployeeDao.getEmployeeById(employeeId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeSave(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		UsrEmployee usrEmployee = new UsrEmployee();
		String employeeId = CommonUtil.nvl(dsReq.getValue("employeeId"), "-1");
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String userId = (String)session.getAttribute("UserId");
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String saveType = (CommonUtil.equals(employeeId, "-1")) ? "I" : "U";
		int result = -1;

		try {
			if (CommonUtil.equals(saveType, "I")) {
				usrEmployee.setEmployeeId(CommonUtil.uid());
			} else {
				usrEmployee = usrEmployeeDao.getEmployeeById(employeeId);
			}

			usrEmployee.setOrgId(orgId);
			usrEmployee.setVisaType(dsReq.getValue("visaType"));
			usrEmployee.setWageType(dsReq.getValue("wageType"));
			usrEmployee.setSurname(dsReq.getValue("surname"));
			usrEmployee.setGivenName(dsReq.getValue("givenName"));
			usrEmployee.setTfn(CommonUtil.replace(dsReq.getValue("tfn"), " ", ""));
			usrEmployee.setDateOfBirth(CommonUtil.toDate(dsReq.getValue("dob"), dateFormat));
			usrEmployee.setStartDate(CommonUtil.toDate(dsReq.getValue("startDate"), dateFormat));
			usrEmployee.setEndDate(CommonUtil.toDate(dsReq.getValue("endDate"), dateFormat));
			usrEmployee.setAddress(dsReq.getValue("address"));
			usrEmployee.setDescription(dsReq.getValue("description"));
			usrEmployee.setIsActive(dsReq.getValue("isActive"));

			if (CommonUtil.equals(saveType, "I")) {
				usrEmployee.setInsertUserId(userId);
				usrEmployee.setInsertDate(CommonUtil.getSysdateAsDate());

				result = usrEmployeeDao.insert(usrEmployee);
			} else {
				usrEmployee.setUpdateUserId(userId);
				usrEmployee.setUpdateDate(CommonUtil.getSysdateAsDate());

				result = usrEmployeeDao.update(employeeId, usrEmployee);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String employeeIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		String employeeId = requestDataSet.getValue("employeeId");
		int result = 0;

		try {
			if (CommonUtil.isNotBlank(employeeId)) {
				employeeIds = new String[] {employeeId};
			}
			result = usrEmployeeDao.delete(employeeIds);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			pageTitle = "Employee List";
			fileName = "EmployeeList";
			columnHeader = new String[] {"SURNAME", "GIVEN_NAME", "TFN", "DATE_OF_BIRTH", "ADDRESS", "WAGE_TYPE_DESC", "VISA_TYPE_DESC", "START_DATE", "END_DATE", "IS_ACTIVE"};
			fileHeader = new String[] {"Surname", "Given Name", "TFN", "Date of Birth", "Address", "Wage Type", "Visa Type", "Start Date", "End Date", "Is Active"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setObject("orgId", orgId);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(usrEmployeeDao.getEmployeeDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}