/**************************************************************************************************
 * project
 * Description - Sys0816 - Tax Table Mgmt.
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sys0816;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.SysTaxMaster.SysTaxMasterDao;
import project.conf.resource.ormapper.dto.oracle.SysTaxMaster;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;
import zebra.util.FileUtil;

public class Sys0816BizImpl extends BaseBiz implements Sys0816Biz {
	@Autowired
	private SysTaxMasterDao sysTaxMasterDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();

		try {
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(sysTaxMasterDao.getTaxMasterDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpload(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getInsert(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdate(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String taxMasterId = requestDataSet.getValue("taxMasterId");

		try {
			paramEntity.setObject("sysTaxMaster", sysTaxMasterDao.getTaxMasterById(taxMasterId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeInsert(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		SysTaxMaster sysTaxMaster = new SysTaxMaster();
		String uid = CommonUtil.uid();
		String loggedInUserId = (String)session.getAttribute("UserId");
		int result = -1;

		try {
			sysTaxMaster.setTaxMasterId(uid);
			sysTaxMaster.setTaxYear(requestDataSet.getValue("taxYear"));
			sysTaxMaster.setWageType(requestDataSet.getValue("wageType"));
			sysTaxMaster.setGross(CommonUtil.toDouble(requestDataSet.getValue("grossIncome")));
			sysTaxMaster.setResident(CommonUtil.toDouble(requestDataSet.getValue("resident")));
			sysTaxMaster.setNonResident(CommonUtil.toDouble(requestDataSet.getValue("nonResident")));
			sysTaxMaster.setInsertUserId(loggedInUserId);
			sysTaxMaster.setInsertDate(CommonUtil.toDate(CommonUtil.getSysdate()));

			result = sysTaxMasterDao.insert(sysTaxMaster);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeUpdate(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String taxMasterId = requestDataSet.getValue("taxMasterId");
		String loggedInUserId = (String)session.getAttribute("UserId");
		SysTaxMaster sysTaxMaster;
		int result = 0;

		try {
			sysTaxMaster = sysTaxMasterDao.getTaxMasterById(taxMasterId);

			sysTaxMaster.setTaxYear(requestDataSet.getValue("taxYear"));
			sysTaxMaster.setWageType(requestDataSet.getValue("wageType"));
			sysTaxMaster.setGross(CommonUtil.toDouble(requestDataSet.getValue("grossIncome")));
			sysTaxMaster.setResident(CommonUtil.toDouble(requestDataSet.getValue("resident")));
			sysTaxMaster.setNonResident(CommonUtil.toDouble(requestDataSet.getValue("nonResident")));
			sysTaxMaster.setUpdateUserId(loggedInUserId);
			sysTaxMaster.setUpdateDate(CommonUtil.toDate(CommonUtil.getSysdate()));

			result = sysTaxMasterDao.updateWithKey(sysTaxMaster, taxMasterId);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String taxMasterId = requestDataSet.getValue("taxMasterId");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String taxMasterIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			if (CommonUtil.isBlank(taxMasterId)) {
				result = sysTaxMasterDao.delete(taxMasterIds);
			} else {
				result = sysTaxMasterDao.delete(taxMasterId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");
		HttpSession session = paramEntity.getSession();

		try {
			pageTitle = "Tax Master List";
			fileName = "TaxMasterList";
			columnHeader = new String[]{"TAX_YEAR", "WAGE_TYPE_DESC", "GROSS", "RESIDENT", "NON_RESIDENT"};
			fileHeader = new String[] {"Tax Year", "Wage Type", "Gross", "Resident", "Non Resident"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(sysTaxMasterDao.getTaxMasterDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeFileUpload(ParamEntity paramEntity) throws Exception {
		DataSet fileDataSet = paramEntity.getRequestFileDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		int result = -1;

		try {
			FileUtil.moveFile(fileDataSet);

			queryAdvisor.setObject("session", session);

			result = sysTaxMasterDao.insertWithExcelFile(queryAdvisor, fileDataSet);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}