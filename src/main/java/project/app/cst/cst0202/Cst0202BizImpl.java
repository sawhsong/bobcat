/**************************************************************************************************
 * project
 * Description - Bbs0202 - Announcement
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.cst.cst0202;

import java.awt.Color;
import java.io.File;

import javax.servlet.http.HttpSession;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.TextAnchor;
import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.bizservice.performance.PerformanceBizService;
import zebra.config.MemoryBean;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.util.CommonUtil;
import zebra.util.FileUtil;

public class Cst0202BizImpl extends BaseBiz implements Cst0202Biz {
	@Autowired
	private PerformanceBizService pbs;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String orgCategory = CommonUtil.nvl((String)session.getAttribute("OrgCategoryForAdminTool"), (String)session.getAttribute("OrgCategory"));
		String financialYear = requestDataSet.getValue("financialYear");
		String quarterName = requestDataSet.getValue("quarterName");

		try {
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(false);

			paramEntity.setAjaxResponseDataSet(pbs.getPerformanceDataSet(orgCategory, orgId, financialYear, quarterName));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getChart(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String orgId = CommonUtil.nvl((String)session.getAttribute("OrgIdForAdminTool"), (String)session.getAttribute("OrgId"));
		String orgCategory = CommonUtil.nvl((String)session.getAttribute("OrgCategoryForAdminTool"), (String)session.getAttribute("OrgCategory"));
		String financialYear = requestDataSet.getValue("financialYear");
		String quarterName = requestDataSet.getValue("quarterName");
		DataSet resultDataSet = new DataSet();
		DataSet chartDataSet = new DataSet();
		DefaultCategoryDataset dataset;
		CategoryPlot plot;
		LineAndShapeRenderer renderer;
		ChartRenderingInfo info;
		NumberAxis rangeAxis;
		CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator();
		File folder;
		File[] files;

		try {
			String realPath = (String)MemoryBean.get("applicationRealPath");
			String webPath = "/shared/repository/temp/vmchart";
			String chartFileName = "/vmchart" + CommonUtil.uid() + ".png";

			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(false);

			resultDataSet = pbs.getPerformanceDataSet(orgCategory, orgId, financialYear, quarterName);

			dataset = createChartDataset(resultDataSet);
			folder = FileUtil.getFileByPath(realPath + webPath);

			int chartWidth = 1100;
			int chartHeight = 600;

			files = folder.listFiles();
			for (int i=0; i<files.length; i++) {
				files[i].delete();
			}

			JFreeChart chart = ChartFactory.createLineChart("", "Month", "Amount", dataset, PlotOrientation.VERTICAL, true, true, false);
			chart.setBackgroundPaint(Color.WHITE);
			chart.setTitle("Annual Performance ("+financialYear+")");

			plot = chart.getCategoryPlot();
			plot.setOutlineVisible(false);

			rangeAxis = (NumberAxis)plot.getRangeAxis();
			rangeAxis.setUpperMargin(0.2);
			plot.setRangeAxis(rangeAxis);

			renderer = (LineAndShapeRenderer)plot.getRenderer();
			renderer.setItemLabelAnchorOffset(5);
			renderer.setBaseShapesVisible(true);
			for (int i=0; i<dataset.getRowCount(); i++) {
				renderer.setSeriesItemLabelGenerator(i, generator);
				renderer.setSeriesItemLabelsVisible(i, true);
				renderer.setSeriesPositiveItemLabelPosition(i, new ItemLabelPosition(ItemLabelAnchor.OUTSIDE1, TextAnchor.BASELINE_CENTER));
			}

			info = new ChartRenderingInfo(new StandardEntityCollection());
			ChartUtilities.saveChartAsPNG(new File(realPath + webPath + chartFileName), chart, chartWidth, chartHeight, info);

			chartDataSet.addName("chartFilePath");
			chartDataSet.addRow();
			chartDataSet.setValue("chartFilePath", webPath + chartFileName);

			paramEntity.setAjaxResponseDataSet(chartDataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	private DefaultCategoryDataset createChartDataset(DataSet ds) throws Exception  {
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();

		for (int i=0; i<ds.getRowCnt()-1; i++) {
			for (int j=1; j<ds.getColumnCnt()-1; j++) {
				dataset.addValue(CommonUtil.toDouble(ds.getValue(i, j)), ds.getValue(i, "TYPE_NAME"), ds.getName(j));
			}
		}

		return dataset;
	}
}