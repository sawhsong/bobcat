/**************************************************************************************************
 * project
 * Description - Sba0402 - Financial Period Type
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sba.sba0402;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.SysFinancialPeriod.SysFinancialPeriodDao;
import project.conf.resource.ormapper.dto.oracle.SysFinancialPeriod;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class Sba0402BizImpl extends BaseBiz implements Sba0402Biz {
	@Autowired
	private SysFinancialPeriodDao sysFinancialPeriodDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();

		try {
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(sysFinancialPeriodDao.getPeriodDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetail(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String periodYear = requestDataSet.getValue("periodYear");
		String quarterCode = requestDataSet.getValue("quarterCode");

		try {
			paramEntity.setObject("sysFinancialPeriod", sysFinancialPeriodDao.getFinancialPeriodByPeriodYearAndCode(periodYear, quarterCode));

			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getInsert(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdate(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity = getDetail(paramEntity);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeInsert(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		SysFinancialPeriod sysFinancialPeriod = new SysFinancialPeriod();
		String loggedInUserId = (String)session.getAttribute("UserId");
		int result = -1;

		try {
			sysFinancialPeriod.setPeriodYear(requestDataSet.getValue("periodYear"));
			sysFinancialPeriod.setQuarterCode(requestDataSet.getValue("quarterCode"));
			sysFinancialPeriod.setFinancialYear(requestDataSet.getValue("financialYearFrom")+"-"+requestDataSet.getValue("financialYearTo"));
			sysFinancialPeriod.setQuarterName(requestDataSet.getValue("quarterName"));
			sysFinancialPeriod.setDateFrom(CommonUtil.toDate(requestDataSet.getValue("dateFrom"), dateFormat));
			sysFinancialPeriod.setDateTo(CommonUtil.toDate(requestDataSet.getValue("dateTo"), dateFormat));
			sysFinancialPeriod.setInsertUserId(loggedInUserId);
			sysFinancialPeriod.setInsertDate(CommonUtil.toDate(CommonUtil.getSysdate()));

			result = sysFinancialPeriodDao.insert(sysFinancialPeriod);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeUpdate(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String periodYear = requestDataSet.getValue("periodYearParam");
		String quarterCode = requestDataSet.getValue("quarterCodeParam");
		String loggedInUserId = (String)session.getAttribute("UserId");
		SysFinancialPeriod sysFinancialPeriod;
		int result = 0;

		try {
			sysFinancialPeriod = sysFinancialPeriodDao.getFinancialPeriodByPeriodYearAndCode(periodYear, quarterCode);
			sysFinancialPeriod.setPeriodYear(requestDataSet.getValue("periodYear"));
			sysFinancialPeriod.setQuarterCode(requestDataSet.getValue("quarterCode"));
			sysFinancialPeriod.setFinancialYear(requestDataSet.getValue("financialYearFrom")+"-"+requestDataSet.getValue("financialYearTo"));
			sysFinancialPeriod.setQuarterName(requestDataSet.getValue("quarterName"));
			sysFinancialPeriod.setDateFrom(CommonUtil.toDate(requestDataSet.getValue("dateFrom"), dateFormat));
			sysFinancialPeriod.setDateTo(CommonUtil.toDate(requestDataSet.getValue("dateTo"), dateFormat));
			sysFinancialPeriod.setUpdateUserId(loggedInUserId);
			sysFinancialPeriod.setUpdateDate(CommonUtil.toDate(CommonUtil.getSysdate()));

			result = sysFinancialPeriodDao.updateWithKey(sysFinancialPeriod, periodYear, quarterCode);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String periodYear = requestDataSet.getValue("periodYear");
		String quarterCode = requestDataSet.getValue("quarterCode");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String keyIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			if (CommonUtil.isBlank(periodYear) && CommonUtil.isBlank(quarterCode)) {
				result = sysFinancialPeriodDao.deleteWithKeys(keyIds);
			} else {
				result = sysFinancialPeriodDao.deleteWithKey(periodYear, quarterCode);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");
		HttpSession session = paramEntity.getSession();

		try {
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));

			pageTitle = "Financial Period List";
			fileName = "FinancialPeriodList";
			columnHeader = new String[]{"period_year", "financial_year", "quarter_code_name", "quarter_name_desc", "date_from", "date_to"};
			fileHeader = new String[] {"Period Year", "Financial Year", "Quarter Code", "Quarter Name", "Date From", "Date To"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(sysFinancialPeriodDao.getPeriodDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}