/**************************************************************************************************
 * project
 * Description - Sba0202 - Organisation Management
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sba.sba0202;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.datahelper.DataHelper;
import project.conf.resource.ormapper.dao.SysOrg.SysOrgDao;
import project.conf.resource.ormapper.dto.oracle.SysOrg;
import zebra.config.MemoryBean;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;
import zebra.util.FileUtil;

public class Sba0202BizImpl extends BaseBiz implements Sba0202Biz {
	@Autowired
	private SysOrgDao sysOrgDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();

		try {
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(sysOrgDao.getOrgDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetail(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String orgId = requestDataSet.getValue("orgId");
		SysOrg sysOrg = new SysOrg();

		try {
			sysOrg = sysOrgDao.getOrgByOrgId(orgId);

			sysOrg.setInsertUserName(DataHelper.getUserNameById(sysOrg.getInsertUserId()));
			sysOrg.setUpdateUserName(DataHelper.getUserNameById(sysOrg.getUpdateUserId()));

			paramEntity.setObject("sysOrg", sysOrg);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getInsert(ParamEntity paramEntity) throws Exception {
		String logoPath = ConfigUtil.getProperty("path.image.orglogo")+"/"+"DefaultLogo.png";

		try {
			paramEntity.setObject("logoPath", logoPath);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdate(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity = getDetail(paramEntity);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeInsert(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet fileDataSet = paramEntity.getRequestFileDataSet();
		HttpSession session = paramEntity.getSession();
		SysOrg sysOrg = new SysOrg();
		String uid = CommonUtil.uid();
		String loggedInUserId = (String)session.getAttribute("UserId");
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String defaultFileName = "DefaultLogo.png";
		String rootPath = (String)MemoryBean.get("applicationRealPath");
		String pathToSave = ConfigUtil.getProperty("path.image.orglogo");
		int result = -1;

		try {
			sysOrg.setOrgId(uid);
			sysOrg.setAbn(CommonUtil.remove(requestDataSet.getValue("abn"), " "));
			sysOrg.setLegalName(CommonUtil.replace(requestDataSet.getValue("legalName"), "||", "&"));
			sysOrg.setTradingName(requestDataSet.getValue("tradingName"));
			sysOrg.setEmail(requestDataSet.getValue("email"));
			sysOrg.setPostalAddress(requestDataSet.getValue("postalAddress"));
			sysOrg.setRegisteredDate(CommonUtil.toDate(requestDataSet.getValue("registeredDate"), dateFormat));
			sysOrg.setIsActive(requestDataSet.getValue("isActive"));
			sysOrg.setOrgCategory(requestDataSet.getValue("orgCategory"));
			sysOrg.setEntityType(requestDataSet.getValue("entityType"));
			sysOrg.setBusinessType(requestDataSet.getValue("businessType"));
			sysOrg.setBaseType(requestDataSet.getValue("baseType"));
			sysOrg.setWageType(requestDataSet.getValue("wageType"));
			sysOrg.setRevenueRangeFrom(CommonUtil.toDouble(requestDataSet.getValue("rRangeFrom")));
			sysOrg.setRevenueRangeTo(CommonUtil.toDouble(requestDataSet.getValue("rRangeTo")));
			sysOrg.setInsertUserId(loggedInUserId);
			sysOrg.setInsertDate(CommonUtil.toDate(CommonUtil.getSysdate()));

			if (fileDataSet.getRowCnt() > 0) {
				String fileName = fileDataSet.getValue("NEW_NAME"), fullPath = "";

				fileName = uid+"_"+fileName;
				fullPath = rootPath + pathToSave + "/" + fileName;
				FileUtil.moveFile(fileDataSet, fullPath);

				sysOrg.setLogoPath(pathToSave + "/" + fileName);
			} else {
				sysOrg.setLogoPath(pathToSave + "/" + defaultFileName);
			}

			result = sysOrgDao.insert(sysOrg);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeUpdate(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet fileDataSet = paramEntity.getRequestFileDataSet();
		HttpSession session = paramEntity.getSession();
		String loggedInUserId = (String)session.getAttribute("UserId");
		String orgId = requestDataSet.getValue("orgId");
		SysOrg sysOrg = new SysOrg();
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String rootPath = (String)MemoryBean.get("applicationRealPath");
		String pathToSave = ConfigUtil.getProperty("path.image.orglogo");
		int result = 0;

		try {
			sysOrg = sysOrgDao.getOrgByOrgId(orgId);

			sysOrg.setAbn(CommonUtil.remove(requestDataSet.getValue("abn"), " "));
			sysOrg.setLegalName(CommonUtil.replace(requestDataSet.getValue("legalName"), "||", "&"));
			sysOrg.setTradingName(requestDataSet.getValue("tradingName"));
			sysOrg.setEmail(requestDataSet.getValue("email"));
			sysOrg.setPostalAddress(requestDataSet.getValue("postalAddress"));
			sysOrg.setRegisteredDate(CommonUtil.toDate(requestDataSet.getValue("registeredDate"), dateFormat));
			sysOrg.setIsActive(requestDataSet.getValue("isActive"));
			sysOrg.setOrgCategory(requestDataSet.getValue("orgCategory"));
			sysOrg.setEntityType(requestDataSet.getValue("entityType"));
			sysOrg.setBusinessType(requestDataSet.getValue("businessType"));
			sysOrg.setBaseType(requestDataSet.getValue("baseType"));
			sysOrg.setWageType(requestDataSet.getValue("wageType"));
			sysOrg.setRevenueRangeFrom(CommonUtil.toDouble(requestDataSet.getValue("rRangeFrom")));
			sysOrg.setRevenueRangeTo(CommonUtil.toDouble(requestDataSet.getValue("rRangeTo")));
			sysOrg.setUpdateUserId(loggedInUserId);
			sysOrg.setUpdateDate(CommonUtil.toDate(CommonUtil.getSysdate()));

			if (fileDataSet.getRowCnt() > 0) {
				String fileName = fileDataSet.getValue("NEW_NAME"), fullPath = "";

				fileName = orgId+"_"+fileName;
				fullPath = rootPath + pathToSave + "/" + fileName;
				FileUtil.moveFile(fileDataSet, fullPath);

				sysOrg.setLogoPath(pathToSave + "/" + fileName);
			}

			sysOrg.addUpdateColumnFromField();

			result = sysOrgDao.update(orgId, sysOrg);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String orgId = requestDataSet.getValue("orgId");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String orgIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			if (CommonUtil.isBlank(orgId)) {
				result = sysOrgDao.delete(orgIds);
			} else {
				result = sysOrgDao.delete(orgId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");
		HttpSession session = paramEntity.getSession();

		try {
			pageTitle = "Organisation List";
			fileName = "OrganisationList";
			columnHeader = new String[]{"legal_name", "trading_name", "abn", "user_cnt", "entity_type_name", "business_type_name", "org_category_name", "wage_type_name",
					"revenue_range_from", "revenue_range_to", "registered_date"};
			fileHeader = new String[]{"Leagal Name", "Trading Name", "ABN", "Users", "Entity Type", "Business Type", "Org Category", "Wage Type",
					"R Range From", "R Range To", "Registered Date"};

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setObject("langCode", (String)session.getAttribute("langCode"));
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(sysOrgDao.getOrgDataSetByCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}