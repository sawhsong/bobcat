<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--/*
 * Framework Generated Hibernate Query hbm Source
 * - USR_INCOME - Income Entry (Sales Income and Other Income for Org Category A, Other Income for Org Category B/C/D)
 */-->
<hibernate-mapping>
	<sql-query name="query.UsrIncome.getSalesIncomeDataSetByCriteria">
	<![CDATA[
		select to_char(src.quarter_date, '${dateFormat}') as quarter_date,
		       src.period_year as period_year,
		       src.financial_year as financial_year,
		       src.quarter_code as quarter_code,
		       (select description_${langCode} from sys_common_code where code_type = 'QUARTER_CODE' and common_code = src.quarter_code) as quarter_code_desc,
		       src.quarter_name as quarter_name,
		       (select description_${langCode} from sys_common_code where code_type = 'QUARTER_NAME' and common_code = src.quarter_name) as quarter_name_desc,
		       uin.income_id as income_id,
		       uin.org_id as org_id,
		       (select legal_name from sys_org where org_id = uin.org_id) as org_name,
		       uin.income_entry_type as income_entry_type,
		       (select description_${langCode} from sys_common_code where code_type = 'INCOME_ENTRY_TYPE' and common_code = uin.income_entry_type) as income_entry_type_desc,
		       uin.record_keeping_type as record_keeping_type,
		       (select description_${langCode} from sys_common_code where code_type = 'RECORD_KEEPING_TYPE' and common_code = uin.record_keeping_type) as record_keeping_type_desc,
		       uin.income_type_id as income_type_id,
		       to_char(uin.income_date, '${dateFormat}') as income_date,
		       nvl(uin.non_cash_amt, 0) as non_cash_amt,
		       nvl(uin.cash_amt, 0) as cash_amt,
		       nvl(uin.gross_amt, 0) as gross_amt,
		       nvl(uin.gst_free_amt, 0) as gst_free_amt,
		       nvl(uin.gst_amt, 0) as gst_amt,
		       nvl(uin.applied_gst, 0) as applied_gst,
		       nvl(uin.net_amt, 0) as net_amt,
		       uin.is_completed,
		       uin.description,
		       uin.insert_user_id,
		       to_char(uin.insert_date, '${dateFormat}') as insert_date,
		       uin.update_user_id,
		       to_char(uin.update_date, '${dateFormat}') as update_date
		  from ( select trunc(trunc(date_from) + (level-1)) as quarter_date,
		                period_year,
		                financial_year,
		                quarter_code,
		                quarter_name
		           from (select date_from,
		                        date_to,
		                        period_year,
		                        financial_year,
		                        quarter_code,
		                        quarter_name
		                   from sys_financial_period
		                  where period_year = '${financialYear}'
		                    and quarter_name = '${quarterName}'
		                )
		        connect by trunc(date_to) >= trunc(date_from) + (level-1)
		       ) src,
		       usr_income uin
		 where uin.income_year(+) = '${financialYear}'
		   and uin.quarter_name(+) = '${quarterName}'
		   and uin.org_id(+) = '${orgId}'
		   and uin.income_entry_type(+) = '${incomeEntryType}'
		   and src.quarter_date = uin.income_date(+)
		${auto_fill}
		${order_by_clause}
	]]>
	</sql-query>

	<sql-query name="query.UsrIncome.getOtherIncomeDataSetByCriteria">
	<![CDATA[
		select uin.income_id as income_id,
		       to_char(uin.income_date, 'dd-MM-yyyy') as income_date,
		       uin.income_year as income_year,
		       uin.quarter_name as quarter_name,
		       (select description_${langCode} from sys_common_code where code_type = 'QUARTER_NAME' and common_code = uin.quarter_name) as quarter_name_desc,
		       uin.org_id as org_id,
		       (select legal_name from sys_org where org_id = uin.org_id) as org_name,
		       uin.income_entry_type as income_entry_type,
		       (select description_${langCode} from sys_common_code where code_type = 'INCOME_ENTRY_TYPE' and common_code = uin.income_entry_type) as income_entry_type_desc,
		       uin.record_keeping_type as record_keeping_type,
		       (select description_${langCode} from sys_common_code where code_type = 'RECORD_KEEPING_TYPE' and common_code = uin.record_keeping_type) as record_keeping_type_desc,
		       uin.income_type_id as income_type_id,
		       sit.is_apply_gst as is_apply_gst,
		       sit.description as income_type_desc,
		       sit.gst_percentage as gst_percentage,
		       nvl(uin.non_cash_amt, 0) as non_cash_amt,
		       nvl(uin.cash_amt, 0) as cash_amt,
		       nvl(uin.gross_amt, 0) as gross_amt,
		       nvl(uin.gst_free_amt, 0) as gst_free_amt,
		       nvl(uin.gst_amt, 0) as gst_amt,
		       nvl(uin.applied_gst, 0) as applied_gst,
		       nvl(uin.net_amt, 0) as net_amt,
		       uin.is_completed,
		       uin.description,
		       uin.insert_user_id,
		       to_char(uin.insert_date, '${dateFormat}') as insert_date,
		       uin.update_user_id,
		       to_char(uin.update_date, '${dateFormat}') as update_date
		  from usr_income uin,
		       sys_income_type sit
		 where uin.income_year = '${financialYear}'
		   and uin.quarter_name = '${quarterName}'
		   and uin.org_id = '${orgId}'
		   and uin.income_entry_type = '${incomeEntryType}'
		   and uin.income_type_id = sit.income_type_id
		${auto_fill}
		${order_by_clause}
	]]>
	</sql-query>

	<sql-query name="query.UsrIncome.getIncomeSummaryDataSetForCategoryA">
	<![CDATA[
		select code.common_code,
		       code.description_${langCode} as description,
		       nvl(income.income_entry_count, 0) as income_entry_count,
		       code.sort_order
		  from sys_common_code code,
		       (select record_keeping_type,
		               count(*) as income_entry_count
		          from usr_income
		         where org_id = '${orgId}'
		           and income_year = '${financialYear}'
		           and quarter_name = '${quarterName}'
		           and income_entry_type = 'SALES'
		           and net_amt > 0
		         group by record_keeping_type
		       ) income
		 where code.code_type = 'RECORD_KEEPING_TYPE'
		   and code.common_code <> '0000000000'
		   and code.common_code = income.record_keeping_type(+)
		union
		select code.common_code,
		       code.description_${langCode} as description,
		       nvl(income.income_entry_count, 0) as income_entry_count,
		       '999' as sort_order
		  from sys_common_code code,
		       (select income_entry_type,
		               count(*) as income_entry_count
		          from usr_income
		         where org_id = '${orgId}'
		           and income_year = '${financialYear}'
		           and quarter_name = '${quarterName}'
		           and income_entry_type = 'OTHTA'
		         group by income_entry_type
		       ) income
		 where code.code_type = 'INCOME_ENTRY_TYPE'
		   and code.common_code = 'OTHTA'
		   and code.common_code = income.income_entry_type(+)
		 order by sort_order
	]]>
	</sql-query>

	<sql-query name="query.UsrIncome.getIncomeSummaryDataSetForCategoryEtc">
	<![CDATA[
		select type.income_type_id,
		       type.income_type,
		       type.description as description,
		       nvl(income.income_entry_count, 0) as income_entry_count
		  from sys_income_type type,
		       (select income_type_id,
		               count(*) as income_entry_count
		          from usr_income
		         where org_id = '${orgId}'
		           and income_year = '${financialYear}'
		           and quarter_name = '${quarterName}'
		         group by income_type_id
		       ) income
		 where type.org_category = '${orgCategory}'
		   and type.income_type_id = income.income_type_id(+)
		 order by type.sort_order
	]]>
	</sql-query>
</hibernate-mapping>