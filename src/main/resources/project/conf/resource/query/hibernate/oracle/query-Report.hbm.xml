<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >
<hibernate-mapping>
	<sql-query name="query.Report.getTrialBalance">
	<![CDATA[
		with data as (
			select src.account_code,
			       src.category_name,
			       abs(sum(nvl(src.debit_amt, 0))) as debit_amt,
			       sum(nvl(src.credit_amt, 0)) as credit_amt,
			       max(nvl(last_year.proc_amt, 0)) as last_year_proc_amt
			  from (select cate.category_level,
			               cate.category_id,
			               cate.category_name,
			               cate.account_code,
			               cate.sort_order,
			               bsta.proc_date,
			               bsta.debit_amt,
			               bsta.credit_amt,
			               bsta.gst_amt,
			               bsta.net_amt,
			               bsta.balance
			          from ( select connect_by_root category_id as root,
			                        level as category_level,
			                        connect_by_isleaf as is_leaf,
			                        substr(sys_connect_by_path(category_id, '-'), 2) as path,
			                        sys_recon_category.*
			                   from sys_recon_category
			                connect by prior category_id = parent_category_id
			                  start with parent_category_id is null
			                  order siblings by sort_order
			               ) cate,
			               (select ubta.main_category,
			                       ubta.sub_category as category_id,
			                       trunc(ubta.proc_date) as proc_date,
			                       case when sum(nvl(ubta.proc_amt, 0)) < 0 then sum(nvl(ubta.proc_amt, 0)) end as debit_amt,
			                       case when sum(nvl(ubta.proc_amt, 0)) >= 0 then sum(nvl(ubta.proc_amt, 0)) end as credit_amt,
			                       sum(nvl(ubta.gst_amt, 0)) as gst_amt,
			                       sum(nvl(ubta.net_amt, 0)) as net_amt,
			                       sum(nvl(ubta.balance, 0)) as balance
			                  from usr_bs_tran_alloc ubta,
			                       (select period_year,
			                               financial_year,
			                               min(date_from) as date_from,
			                               max(date_to) as date_to
			                          from sys_financial_period
			                         where 1 = 1
			                           ${conFinancialYear}
			                           ${conQuarterName}
			                         group by period_year, financial_year
			                       ) fy
			                 where user_id in (select user_id from sys_user where org_id = '${orgId}')
			                   ${conFinancialYearPeriod}
			                   ${conFromDate}
			                   ${conToDate}
			                 group by ubta.main_category,
			                       ubta.sub_category,
			                       trunc(ubta.proc_date)
			               ) bsta
			         where cate.category_id = bsta.category_id(+)
			       ) src,
			       (select cate.account_code,
			               sum(nvl(bsta.proc_amt, 0)) as proc_amt
			          from ( select connect_by_root category_id as root,
			                        level as category_level,
			                        connect_by_isleaf as is_leaf,
			                        substr(sys_connect_by_path(category_id, '-'), 2) as path,
			                        sys_recon_category.*
			                   from sys_recon_category
			                connect by prior category_id = parent_category_id
			                  start with parent_category_id is null
			                  order siblings by sort_order
			               ) cate,
			               (select ubta.main_category,
			                       ubta.sub_category as category_id,
			                       trunc(ubta.proc_date) as proc_date,
			                       sum(nvl(ubta.proc_amt, 0)) as proc_amt,
			                       sum(nvl(ubta.gst_amt, 0)) as gst_amt,
			                       sum(nvl(ubta.net_amt, 0)) as net_amt,
			                       sum(nvl(ubta.balance, 0)) as balance
			                  from usr_bs_tran_alloc ubta,
			                       (select period_year,
			                               financial_year,
			                               min(date_from) as date_from,
			                               max(date_to) as date_to
			                          from sys_financial_period
			                         where 1 = 1
			                           ${conLastFinancialYear}
			                         group by period_year, financial_year
			                       ) fy
			                 where user_id in (select user_id from sys_user where org_id = '${orgId}')
			                   and trunc(ubta.proc_date) between trunc(fy.date_from) and trunc(fy.date_to)
			                 group by ubta.main_category,
			                       ubta.sub_category,
			                       trunc(ubta.proc_date)
			               ) bsta
			         where cate.category_id = bsta.category_id(+)
			         group by cate.account_code
			       ) last_year
			 where src.account_code = last_year.account_code(+)
			 group by src.account_code,
			       src.category_name,
			       src.sort_order
		)
		select (grouping(account_code)+grouping(category_name)) as div,
		       round(sum(nvl(last_year_proc_amt, 0)), 2) as last_year,
		       account_code,
		       category_name as description,
		       round(sum(nvl(debit_amt, 0)), 2) as debit,
		       round(sum(nvl(credit_amt, 0)), 2) as credit
		  from data
		 where 1 = 1
		   and (debit_amt + credit_amt + last_year_proc_amt) <> 0
		 group by rollup(account_code, category_name)
		having (grouping(account_code)+grouping(category_name)) in ('0', '2')
		 order by account_code
	]]>
	</sql-query>

	<sql-query name="query.Report.getGeneralLedger">
	<![CDATA[
		with src as (
			select cate.category_level,
			       cate.category_id,
			       cate.category_name,
			       cate.account_code,
			       bsta.proc_date,
			       bsta.debit_amt,
			       bsta.credit_amt,
			       bsta.gst_amt,
			       bsta.gross_amt,
			       bsta.balance
			  from ( select connect_by_root category_id as root,
			                level as category_level,
			                connect_by_isleaf as is_leaf,
			                substr(sys_connect_by_path(category_id, '-'), 2) as path,
			                sys_recon_category.*
			           from sys_recon_category
			        connect by prior category_id = parent_category_id
			          start with parent_category_id is null
			          order siblings by sort_order
			       ) cate,
			       (select ubta.main_category,
			               ubta.sub_category as category_id,
			               trunc(ubta.proc_date) as proc_date,
			               case when sum(nvl(ubta.net_amt, 0)) < 0 then sum(nvl(ubta.net_amt, 0)) end as debit_amt,
			               case when sum(nvl(ubta.net_amt, 0)) >= 0 then sum(nvl(ubta.net_amt, 0)) end as credit_amt,
			               sum(nvl(ubta.gst_amt, 0)) as gst_amt,
			               sum(nvl(ubta.proc_amt, 0)) as gross_amt,
			               max(nvl(ubta.balance, 0)) as balance
			          from usr_bs_tran_alloc ubta,
			               (select period_year,
			                       financial_year,
			                       min(date_from) as date_from,
			                       max(date_to) as date_to
			                  from sys_financial_period
			                 where 1 = 1
			                   ${conFinancialYear}
			                   ${conQuarterName}
			                 group by period_year, financial_year
			               ) fy
			         where user_id in (select user_id from sys_user where org_id = '${orgId}')
			           and trunc(ubta.proc_date) between trunc(fy.date_from) and trunc(fy.date_to)
			         group by ubta.main_category,
			               ubta.sub_category,
			               trunc(ubta.proc_date)
			       ) bsta
			 where cate.category_id = bsta.category_id(+)
		)
		select (grouping(src.account_code)+grouping(src.category_name)+grouping(src.proc_date)) as div,
		       src.account_code,
		       src.category_name,
		       src.proc_date,
		       round(sum(nvl(src.gst_amt, 0)), 2) as gst_amt,
		       round(sum(nvl(src.gross_amt, 0)), 2) as gross_amt,
		       round(sum(nvl(src.debit_amt, 0)), 2) as debit_amt,
		       round(sum(nvl(src.credit_amt, 0)), 2) as credit_amt,
		       round(max(nvl(src.balance, 0)), 2) as balance
		  from src
		 where src.proc_date is not null
		 group by rollup(src.account_code, src.category_name, src.proc_date)
		having (grouping(src.account_code)+grouping(src.category_name)+grouping(src.proc_date)) in ('0', '1', '3')
		 order by src.account_code,
		       div desc,
		       src.proc_date
	]]>
	</sql-query>
</hibernate-mapping>