<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--/*
 * Framework Generated Hibernate Query hbm Source
 * - USR_EMPLOYEE - Employee Master
 */-->
<hibernate-mapping>
	<sql-query name="query.UsrEmployee.getEmployeeSummaryDataSet">
	<![CDATA[
		select code.common_code,
		       code.description_${langCode} as description,
		       nvl(emp.emp_entry_count, 0) as emp_entry_count,
		       nvl(emp_wage_entry_count, 0) as emp_wage_entry_count,
		       nvl(tot_gross_wage, 0) as tot_gross_wage,
		       nvl(tot_tax, 0) as tot_tax,
		       nvl(tot_super_amt, 0) as tot_super_amt,
		       nvl(tot_net_wage, 0) as tot_net_wage
		  from sys_common_code code,
		       (select emp.visa_type,
		               nvl(count(*), 0) as emp_entry_count,
		               nvl(sum(emp_wage_entry_count), 0) as emp_wage_entry_count,
		               nvl(sum(tot_gross_wage), 0) as tot_gross_wage,
		               nvl(sum(tot_tax), 0) as tot_tax,
		               nvl(sum(tot_super_amt), 0) as tot_super_amt,
		               nvl(sum(tot_net_wage), 0) as tot_net_wage
		          from usr_employee emp,
		               (select employee_id,
		                       count(*) as emp_wage_entry_count,
		                       nvl(sum(gross_wage), 0) as tot_gross_wage,
		                       nvl(sum(tax), 0) as tot_tax,
		                       nvl(sum(super_amt), 0) as tot_super_amt,
		                       nvl(sum(net_wage), 0) as tot_net_wage
		                  from usr_employee_wage
		                 where org_id = '${orgId}'
		                   and wage_year = '${financialYear}'
		                   and quarter_name = '${quarterName}'
		                 group by employee_id
		               ) ewg
		         where emp.org_id = '${orgId}'
		           and emp.is_active = 'Y'
		           and emp.employee_id = ewg.employee_id(+)
		         group by emp.visa_type
		       ) emp
		 where code.code_type = 'VISA_TYPE'
		   and code.common_code <> '0000000000'
		   and code.common_code = emp.visa_type(+)
		 order by code.sort_order
	]]>
	</sql-query>

	<sql-query name="query.UsrEmployee.getEmployeeDataSetByCriteria">
	<![CDATA[
		select ump.employee_id,
		       ump.org_id,
		       (select legal_name from sys_org where org_id = ump.org_id) as org_name,
		       ump.visa_type,
		       (select description_${langCode} from sys_common_code where code_type = 'VISA_TYPE' and common_code = ump.visa_type) as visa_type_desc,
		       ump.wage_type,
		       (select description_${langCode} from sys_common_code where code_type = 'WAGE_TYPE' and common_code = ump.wage_type) as wage_type_desc,
		       nvl(ump.hourly_rate, 0) as hourly_rate,
		       ump.surname,
		       ump.given_name,
		       ump.tfn,
		       to_char(ump.date_of_birth, '${dateFormat}') as date_of_birth,
		       ump.address,
		       to_char(ump.start_date, '${dateFormat}') as start_date,
		       to_char(ump.end_date, '${dateFormat}') as end_date,
		       ump.description,
		       ump.is_active,
		       ump.insert_user_id,
		       to_char(ump.insert_date, '${dateFormat}') as insert_date,
		       ump.update_user_id,
		       to_char(nvl(ump.update_date, ump.insert_date), '${dateFormat}') as update_date
		  from usr_employee ump
		 where ump.org_id = '${orgId}'
		${auto_fill}
		${order_by_clause}
	]]>
	</sql-query>

	<sql-query name="query.UsrEmployee.getEmployeeDataSetByEmployeeId">
	<![CDATA[
		select ump.employee_id,
		       ump.org_id,
		       ump.visa_type,
		       ump.wage_type,
		       nvl(ump.hourly_rate, 0) as hourly_rate,
		       ump.surname,
		       ump.given_name,
		       ump.tfn,
		       to_char(ump.date_of_birth, '${dateFormat}') as date_of_birth,
		       ump.address,
		       to_char(ump.start_date, '${dateFormat}') as start_date,
		       to_char(ump.end_date, '${dateFormat}') as end_date,
		       ump.description,
		       ump.is_active,
		       ump.insert_user_id,
		       to_char(ump.insert_date, '${dateFormat}') as insert_date,
		       ump.update_user_id,
		       to_char(nvl(ump.update_date, ump.insert_date), '${dateFormat}') as update_date
		  from usr_employee ump
		${where_cluase}
		${auto_fill}
		${order_by_clause}
	]]>
	</sql-query>

	<sql-query name="query.UsrEmployee.getEmployeeSurnameDataSetForAutoCompletion">
	<![CDATA[
		select distinct surname
		  from usr_employee
		 where 1 = 1
		 ${auto_fill}
		 ${order_by_clause}
	]]>
	</sql-query>

	<sql-query name="query.UsrEmployee.getEmployeeGivenNameDataSetForAutoCompletion">
	<![CDATA[
		select distinct given_name
		  from usr_employee
		 where 1 = 1
		 ${auto_fill}
		 ${order_by_clause}
	]]>
	</sql-query>
</hibernate-mapping>